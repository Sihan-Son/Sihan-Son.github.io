<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sihan`s Blog</title>
    <link>https://sihan-son.github.io/</link>
    <description>Recent content on Sihan`s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 15 Feb 2021 23:01:07 +0900</lastBuildDate><atom:link href="https://sihan-son.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>겉핥기로 시작하는 Git -git ignore편-</title>
      <link>https://sihan-son.github.io/git/lick-git-ignore/</link>
      <pubDate>Mon, 15 Feb 2021 23:01:07 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/git/lick-git-ignore/</guid>
      <description>지난 글의 예고와는 다르게 git ignore를 먼저 가지고 왔습니다. .gitignore를 확장자로 가지니는 이 친구는 이름값을 하는 친구 입니다. git이 무시할 파일과 디렉토리를 설정해주기 때문입니다.
코드를 작성하고 프로젝트를 진행하다보면 굳이 공유하지 않아도 될 파일이 만들어 지기도 하고, 뒤에 다루게 될 원격 저장소에 올라가지 않아도 되거나 올리면 안될 결과물들이 만들어지기도 합니다. 대표적으로 .idea, .vs 등 IDE들에서 생성되지만 코드를 공유하고 백업하는데 오히려 방해가 되는 것들이 있습니다. 다른 사람이나 미래의 내가 그 코드를 다시 사용하는데 IDE 설정 등이 commit을 방해하는 경우도 생깁니다.</description>
    </item>
    
    <item>
      <title>겉핥기로 시작하는 Git 작업 단계와 파일 관리 -add편-</title>
      <link>https://sihan-son.github.io/git/lick-git-add/</link>
      <pubDate>Sun, 14 Feb 2021 23:10:33 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/git/lick-git-add/</guid>
      <description>이미지에 있는 명령어는 하나씩 배울 거니 지금은 이해가 안가도 괜찮습니다. 겉핥기로 시작하는 Git 시리즈는 Git bash를 사용하는 것으로 전제로 작성 된 글입니다. 이김에 CLI에 익숙해져 보세요!!
오늘은 Git이 어떤 작업 순서를 살펴 보겠습니다. Git을 사용하면 물리적으로는 2가지 단계 논리적으로는 3,4단계에 걸쳐 있습니다. 여기서 물리적인 단계는 작업을 하고 있는 내 컴퓨터와 내 작업 내역을 저장할 원격 저장소가 있는 서버 또는 Github, GitLab 등의 서비스 저장소를 의미하며 물리적으로 2개 이상으로 나뉘어 있는게 보통입니다.</description>
    </item>
    
    <item>
      <title>Flutter in Action</title>
      <link>https://sihan-son.github.io/book/flutter-in-action/</link>
      <pubDate>Sun, 14 Feb 2021 10:41:15 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/book/flutter-in-action/</guid>
      <description>2021년도에도 한빛리뷰어 활동을 이어가게 되었습니다. 이번달에 제가 소개 할 책은 Flutter in Action입니다. 작년 이맘 때는 React관련 서적들이 출판 시장에서 쏟아져 나왔었는데 올해는 Flutter 차례인 것 같습니다.
안드로이드, ios, 웹을 다른 프레임워크가 아닌 하나의 프레임워크를 사용하려고 하는 경우가 잦아지고 있습니다. 시간, 인력, 관리 등 다양한 이유로 크로스 플랫폼 프레임워크가 뜨는 중인 듯 합니다.
Flutter in Action은 이미 개발을 하고 있는 분들 대상으로 쓰여진 Flutter 책 입니다. 즉 이 책으로 프로그래밍 입문에는 무리가 있습니다.</description>
    </item>
    
    <item>
      <title>겉핥기로 시작하는 Git</title>
      <link>https://sihan-son.github.io/git/lick-git-start/</link>
      <pubDate>Tue, 09 Feb 2021 22:58:36 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/git/lick-git-start/</guid>
      <description>초심을 되찾고자 기술 블로그로 돌아가기로 했습니다! 1년 반 정도 IT 도서 서평만 올렸는데 학부 시절 누가 제가 알려줬으면 했던 기술들을 연재해보려고 합니다. 해당 프로젝트의 첫 아이템인 Git입니다.
이미 많은 양질의 Git, Github 관련 글들이 인터넷에 존재하지만 제가 겪었던 시행착오를 나누면서 제 블로그를 보시는 분들에게 도움이 되었으면 합니다.
대학시절 팀 프로젝트, 동아리 등의 활동을 하면서 제일 먼저 세팅하고 필요성을 역설한 개발도구가 Git이었습니다. 하지만 많은 경우 시작하는 시점에선 Git의 필요성조차 느끼지 못하는 친구들이 많았습니다.</description>
    </item>
    
    <item>
      <title>gitignore 변경 사항 remote repo에 적용하기</title>
      <link>https://sihan-son.github.io/git/git-ignore-update/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/git/git-ignore-update/</guid>
      <description>테크 블로그를 목표 시작한 블로그가 1년 넘게 IT 도서 서평 블로그가 되었습니다. 초심을 찾고자 오랜만에 git, Github를 주제로 돌아왔습니다. 오늘 내용은 Github에만 적용 되는 내용은 아니고 bitbucket, gitlab에서도 동일하게 적용되는 내용이지만 제 주 서식처가 github인 관계로 github가 메인입니다.
git을 이용해 프로젝트를 진행하다 보면 굳이 버전관리가 필요 없거나 remote repo인 Github등에 올리면 안되거나, 필요가 없는 것들이 존재합니다. git에 좀 익숙하신 분들이라면 이런 파일이나 디렉토리를 관리하기 위해서 .gitignore을 대충이라도 써보셨거나 쓸 계획을 가지고 계실 것입니다.</description>
    </item>
    
    <item>
      <title>핵심만 콕! 쿠버네티스</title>
      <link>https://sihan-son.github.io/kubernetes/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/kubernetes/</guid>
      <description>최근 몇 년 기술분야에서 꾸준히 보이고 있는 키워드 중에 하나 인 쿠버네티스를 다룬 책인 핵심만 콕! 쿠버네티스입니다. 결론부터 이야기 하자면 이 책이 필요한 독자 층은 굉장히 제한적일 것 같습니다. 책의 도입부에서 간단하게 가상화 컨테이너인 Docker에 대한 활용과 개념을 성명하고 있지만 제한적입니다. 개인이 공부용으로 다루기엔 많이 큰 시스템이라고 생각이 되고요. 물론 AWS 등 클라우드 서비스를 이용하면 충분히 개인도 실습을 병행한 학습이 가능하고 운영이 가능합니다. 이런 조건들을 책을 선택하기 전에 고려 해보시면 좋을 것 같습니다.</description>
    </item>
    
    <item>
      <title>혼자 공부하는 머신러닝&#43;딥러닝 </title>
      <link>https://sihan-son.github.io/alone-dl/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/alone-dl/</guid>
      <description>오늘은 지난번 글에서 곧 돌아오겠다고 예고한 혼자 공부하는 머신러닝+딥러닝입니다. 한빛에서 칼을 갈고 만들고 있다고 느끼는 시리즈인 혼공 시리즈의 머신러닝, 딥러닝입니다. 제일 놀란 점은 두께와 퀄리티 대비 책이 저렴하다는 점이었습니다. 600페이지에 달하는 책을 정가 26,000원이라는 생각보다 저렴한 가격에 만날 수 있습니다. 다른 인공지능 도서들이 가격이 큰 문턱이라는 걸 생각하면 이름처럼 혼자 공부하기에 부담을 덜 수 있는 책이라고 생각합니다
다른 인공지능 분야 도서들이랑 가장 큰 차별 점을 꽂으라면 첫 데이터 셋으로 MNIST, 와닿지도 않는 보스턴 집값 데이터가 아니라 혼공맨이 정말 실제로 겪을만한 데이터를 다룹니다.</description>
    </item>
    
    <item>
      <title>밑바닥부터 시작하는 딥러닝 3 </title>
      <link>https://sihan-son.github.io/deep-learning-from-scratch-3/</link>
      <pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/deep-learning-from-scratch-3/</guid>
      <description>Deep Learning(이하 DL)은 배우기 쉬운데 어려운, 굉장히 아이러니한 분야가 되어가고 있습니다. 강력하고 좋은 프레임워크와 튜토리얼들이 배움과 사용의 문턱을 굉장히 낮추어 주었습니다. 이는 동전의 양면처럼 장단점이 극명하게 나뉘는 결과를 초래했습니다. 문턱이 낮아지면서 다양한 아이디어와 기술들이 분야에 기여하고, 흥미 있고 능력있는 친두들을 일찍 발굴해 내는 등의 장점이 있습니다. 동시에 레토르트 식품을 서빙하는 식당들이 많아지고 있습니다. 모델에 대한 이해 없이 하이퍼파라메타와 데이터셋만 조금 바꾸어 결과를 뽑아 사용하는 말 그대로 밑바닥이 부족한 사용자들도 속출하는 듯 합니다.</description>
    </item>
    
    <item>
      <title>Do it! 점프 투 장고</title>
      <link>https://sihan-son.github.io/do-it-django/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/do-it-django/</guid>
      <description>지난 달에 리뷰한 점프 투 플라스크와 형제로 나온 책입니다. Python을 공부하다보면 언젠가 마주치는 이름입니다.
이제는 웹은 우리와 떨어질 수 없는 존재가 되어버렸습니다. 개발을 하다보면 아무리 피해가려고 해도 중간중간 만날 수 밖에 없는 누군가에겐 애증의 존재가 되어버린 웹입니다. Django는 웹을 위한 대부분의 것을 다 준비해준 일명 Macro Framework입니다. 최소한의 기능만을 제공하는 Flask와는 정 반대의 느낌을 가지고 있는 프레임워크입니다.
다른 웹 프레임워크를 다루다가 Django를 만나면 조금은 당황 할 수도 있는게 데이터베이스를 정의하는 Model을 기준으로 프로젝트 돌아가서 웹으로 Django를 배운다는 느낌보다 Django를 위한 Django를 배운다는 느낌이 강하게 들 수 있습니다.</description>
    </item>
    
    <item>
      <title>다시 확률 통계 -확률편-</title>
      <link>https://sihan-son.github.io/again-probability/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/again-probability/</guid>
      <description>2021년 첫 책은 길벗의 수학책인 다시 확률 통계: 확률편입니다. 같은 시리즈의 다시 미분 적분 처럼 다시 수학 공부를 하고 싶은 사람들 위한 기초 개념 서적입니다.
일상 생활 속에 끝없는 확률게임을 마주합니다. 점심 먹고 아이스크림 내기 부터 한 주의 즐거움을 위해 산다는 로또까지 소소하게 확률을 계산하고 있습니다. 그런데 분명 학생 시절 배운 것 같지만 아리송한 부분이 또 많은게 확률입니다. 이건 독립사건과 종속사건 중에 하나는 더하고 하나는 곱하는게 맞는데 뭐가 뭔지 헷갈려서 계산을 포기하고 손으로 세는 경우를 주변에서 어렵지 않게 볼 수 있습니다.</description>
    </item>
    
    <item>
      <title>Do it! 점프 투 플라스크</title>
      <link>https://sihan-son.github.io/do-it-flask/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/do-it-flask/</guid>
      <description>python은 분명 쉽고 간결한 언어이다. 간결한 만큼 강력하고 확장성이 좋은 언어이다. 기초가 간결하다고 해서 본격적으로 사용하기 위한 코드가 쉽다는 의미는 아니다. 오히려 본격적으로 사용하기 위해선 다양한 라이브러리들을 얼마나 유기적으로 사용하느냐가 python을 잘 다룬다고 할 수 있을 것이다.
웹 프로그래밍은 점점 개발자에게 요구되는 기본적인 기술요소가 되어가고 있는 듯 하다. 웹은 우리의 코드에게 UI를 선물하기 좋은 방법입니다. UI를 선물하기 위해선 몇 가지 거쳐야할 단계가 있습니다. flask는 우리의 선물 포장지를 만들어 python Web Framework입니다.</description>
    </item>
    
    <item>
      <title>처음 배우는 스위프트</title>
      <link>https://sihan-son.github.io/swift-ios/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/swift-ios/</guid>
      <description>이번 달에 소개해 드릴 책은 처음 배우는 스위프트입니다. swift는 APPLE에서 공식적으로 채택하고 있는 프로그램 개발 언어입니다. 러프하게 이야기하자면 C에서 분화된 Object-C를 현대적인 형태로 개선한게 현재의 swift입니다. 나름 크로스 플랫폼을 지원하고는 있어 Linux에서는 무리 없이 사용이 가능하지만 Windows에서는 과거 C#이 macOS에서 지원이 잘 되지 않는 모습입니다. 원활한 사용을 위해서는 결국 macOS가 필요한게 현재 swift입니다.
그런데 왜 swift를 배워야 할까요? ios어플리케이션를 위한 유일한 답은 아니지만 충분히 좋은 답이 됩니다. 또 인공지능 개발자에게는 swift for tensorflow라는 기존의 대체제가 될 수 있습니다.</description>
    </item>
    
    <item>
      <title>데이터 전처리 대전</title>
      <link>https://sihan-son.github.io/data-preprocessing/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/data-preprocessing/</guid>
      <description>이번 달에 만나볼 책은 데이터 전처리 대전입니다. 인공지능, 빅데이터 등이 기술 분야에서 큰 자리를 잡아가고 있습니다. 그 동시에 이 데이터를 다루는 기술의 중요도도 커지고 있습니다. 그래서 데이터를 다루는 책 여러권이 시장에 나오고 있습니다.
데이터는 굉장히 다양한 형태로 뽑아져 나옵니다. 종류도 다양하고, 데이터 셋이 가지고 있는 속성 값들, 속성의 종류들 너무 다양한 형태로 존재해서 한가지 방법론으로 모든 데이터를 다룰 수는 없습니다. 또 뽑아져 나온 데이터가 모두 우리에게 필요하지도 않습니다. 수행하려는 작업에 따라 전혀 필요없는 속성들도 존재합니다.</description>
    </item>
    
    <item>
      <title>GANs in Action</title>
      <link>https://sihan-son.github.io/gans-in-action/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/gans-in-action/</guid>
      <description>정말 오랜만에 리뷰하는 인공지능 관련도서입니다! 이 책은 인공지능에서 가장 도전적인 분야 중 하나인 생성모델 중에서 적대적 생성모델(Generative Adversarial Nets 이하 GAN)을 전반적으로 다루고 있습니다. 큰 파장을 불러온 바닐라 GAN을 시작으로 GAN분야에서도 새 지평을 열어준 CGAN, CycleGAN까지 다루면서 GAN의 국한해서는 생성모델의 주요한 발전사를 옅볼수 있는 책입니다. 생성모델에 GAN 위주의 이야기가 나오지만 GAN이외에도 다야한 모델들이 있다는 것은 알아 두시면 좋을 것 같습니다.
인공지능 분야에서도 직관적이지도 않고 수학적 난이도도 있는 분야이다 보니 일정 수준에 오른 독자들이 읽기를 권하고 있습니다.</description>
    </item>
    
    <item>
      <title>UX/UI의 10가지 심리학 법칙</title>
      <link>https://sihan-son.github.io/law-of-ui-ux/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/law-of-ui-ux/</guid>
      <description>원서 구매를 고민 하던 중 팔로우 중이던 페이스북 책만페이지에서 번역 소식을 접하고 예약구매를 한 책이다. 토이 프로젝트를 진행하면서 가장 소홀했던 UX/UI 구성을 여유가 있을 때 보안 할 방법을 찾다가 디자인 공부를 하던 동생과 현직에 계신 디자이너에게 추천을 받아 큰 기대를 가지고 책을 받았다.
책의 첫인상은 얇았다. 언뜻 생각해도 이 두께에 그 방대한 양의 내용을 담는건 무리가 아닐까하는 우려로 책의 첫장을 넘기자 우려는 기대로 바뀌었다. 두께는 얇았지만 밀도가 높은 책이었다. 12장으로 이루어진 책은 각 장에서 이야기를 빙빙 돌리지 않고 핵심을 간결한 어조로 이야기했다.</description>
    </item>
    
    <item>
      <title>데이터 과학을 위한 통계</title>
      <link>https://sihan-son.github.io/statics-for-data-science/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/statics-for-data-science/</guid>
      <description>이번 달에 리뷰 할 책은 통계학과 데이터 과학에 관한 책입니다. 이 책을 고민하실 때 가장 중요한 이야기를 먼저 하자면 R로 쓰여진 책 입니다. R에 익숙하지 않아 책을 읽으면서 코드가 쭉쭉 읽히지 않았던 점은 아쉬웠지만 통계를 다루시는 분들 중에 R유저가 많기 때문에 개인적인 아쉬움으로 묻어두고 리뷰를 시작하겠습니다.
책의 구성은 정말 마음에 들었습니다. 각 절을 시작하면서 다루는 핵심 용어들을 요약 정리를 해줍니다. 해당 절에서 어떤 내용을 다룰지 미리 볼 수도 있고, 개념이 헷갈릴 때 책 중간을 다시 찾지 않아도 되어서 좋았습니다.</description>
    </item>
    
    <item>
      <title>More Effective C# </title>
      <link>https://sihan-son.github.io/more-effective-csharp/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/more-effective-csharp/</guid>
      <description>굉장히 다양한 프로그래밍 언어가 있고, 취향과 용도 따라 골라서 사용하고 있다. 각 언어들에서 사용하는 기본적인 문법이 큰 틀에서는 대동소이 하다보니 편하게 다른 언어로 넘어가서 사용 하실겁니다. 이러다 보니 처음 배운 언어 스타일이 다른 언어에서도 그대로 사용되는 경향이 있습니다. 그래서 다양한 서적들이 각 언어에 맞게 사용하는 방법을 소개하는 책들이 있습니다. 이 책도 그런 책들 중 하나입니다. C#을 C#처럼 사용하는 실무에서 어떻게 써야하는지를 구체적으로 다루고 있는 책입니다.
각 언어는 그 언어가 만들어진 철학을 이해하고 맞춰 사용하는 것이 가장 효율적으로 사용할 수 있는 방법이라고 생각합니다.</description>
    </item>
    
    <item>
      <title>이것이 MySQL이다</title>
      <link>https://sihan-son.github.io/mysql/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mysql/</guid>
      <description>2월에 나는 리뷰어다 2020에 뽑히고 첫 글을 드디어 작성하게 되었습니다. 훈련을 다녀오느라 4달 동안 전혀 받아 볼 수 없는 상황이었어서 4달만에 활동을 시작하게 되었습니다. 딥러닝 받고싶었ㅇ..
MySQL은 프로그래밍을 어느 정도 공부 하신 분들과는 떨어질 수 없는 뭔가 지긋지긋한 사이인 친구입니다. 이 글을 읽으시는 분들은 잘은 못해도 대충은 다룰 줄 알고, 문법이 왜 이런 식이냐고 투덜 거리신 경험이 있을 거라고 생각합니다. 프로젝트를 진행하면서 필요한 기능만 찾아 쓰다보니 조각조각 알고는 있지만 전체적인 것을 잘 모르는 경우도 많이 본 듯합니다.</description>
    </item>
    
    <item>
      <title>코틀린을 다루는 기술</title>
      <link>https://sihan-son.github.io/kotlin-advanced/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/kotlin-advanced/</guid>
      <description>16주의 훈련을 받고 오랜만에 새로운 책의 서평으로 돌아왔습니다. 아마 꾸준히 보러 오시는 분이 없는 작은 블로그라 제 근황은 별로 궁금하지 않으실테니 이만 줄이고 책에 대한 이야기로 들어가 보겠습니다.
책의 제목을 보고 Kotlin을 배우려고 구매를 고민하는 분들이 아마 이 글을 보고 계실 듯 합니다. 결론 부터 이야기 하자면 이 책은 입문서적이 아닙니다. 이미 Kotlin을 사용하는 사용자가 더 안전하고 깔끔한 코드를 Kotlin을 이용해서 작성 할 수 있게 도와주는 나침반 같은 역할을 하는 책입니다.</description>
    </item>
    
    <item>
      <title>Do it! 리액트 프로그래밍 정석</title>
      <link>https://sihan-son.github.io/do-it-react/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/do-it-react/</guid>
      <description>8번쨰 서평이자 입대 전 마지막 서평으로 이지스퍼블리싱의 Do it! 리액트 책으로 찾아왔습니다. 웹 개발 공부를 시작하면서 프레임워크의 홍수에서 어떤 것을 골라야할지 망설이시는 분이 많으리라 생각됩니다. 저도 그 중 한명이어서 이번 Do iT! 리액트를 기다렸고, 운 좋게도 서평단에 뽑혀 이렇게 서평을 작성하게 되었습니다.
웹 프로그래밍의 지경이 점점 넓어지고 있고, 웹과 모바일의 경계도 점점 허물어지고 있습니다. 그래서 리액트, 플로터 등 멀티 플랫폼을 한번에 만들 수 있는 프레임워크들과, 프론트엔드를 위한 Angular.js , Vue.js 등 수 많은 JS 프레임워크들이 나오고 있습니다.</description>
    </item>
    
    <item>
      <title>Do it! 딥러닝</title>
      <link>https://sihan-son.github.io/do-it-deep-learning/</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/do-it-deep-learning/</guid>
      <description>딥러닝 Deep Learning, 머신러닝 Machine Learning 분야의 유명서적 케라스 창시자에게 배우는 딥러닝, 머신러닝 교과서(보러가기) 등의 서적을 번역하신 박해선씨가 직접 쓰신 책입니다. 역서에서도 볼 수 있던 전문성과 수려한 문장력이 돋보인 책입니다. 처음부터 프레임워크를 이용해 코딩하는 방법이 아닌 numpy를 이용한 스크래치 빌드와 이론강의를 수식과 함께 보여줍니다. 손실 함수, 역전파 등 주요한 개념들을 수학적 설명과 코드로 옮겨줘서 풍성한 이해를 도와줍니다.
scikit-learn, Tensorflow, Keras 등의 적절한 상황에 사용하는 예제들을 보여주기 때문에 사용 용례를 익히기 좋습니다.</description>
    </item>
    
    <item>
      <title>Do it! 지옥에서 온 문서 관리자 깃&amp;깃허브 입문</title>
      <link>https://sihan-son.github.io/git-from-hell/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/git-from-hell/</guid>
      <description>GIT과 GITHUB는 프로그래밍을 시작하면 어느 순간부터 많이 듣지만 누군가에게는 굉장히 어려워 보이고 익숙하지 않은 개념일 수 있다. GIT과 GITHUB이 무슨 차이가 있고 이게 무슨 필요지 싶다. 특히 혼자 개발하는 분들에게는 협업 툴 아니냐고 생각하기 쉽상이다. 하지만 혼자 개발하는 분일 수록 GIT은 친해져야하는 툴이라고 생각한다. 이 책은 입문자를 대상으로 씌여진 책이다. 개념적인 부분이 굉장히 친절하게 잘 되어있다. 약 4년 동안 쓰면서도 헷갈리던 부분을 명쾌하게 해결해주었다.
책은 총 6개의 챕터로 이루어져 있다. 앞의 3 챕터는 GIT설치부터 전반적인 사용 방법까지 설명한다.</description>
    </item>
    
    <item>
      <title>된다! 파워포인트 실무의 신 한 번 배우면 평생 시간 버는 입문서</title>
      <link>https://sihan-son.github.io/ppt-gosu/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/ppt-gosu/</guid>
      <description>파워포인트는 초등학교 3학년때 특기적성(아직도 있는지는 모르겠는) 시간에 처음 접하고 중고등학교 시절과 이제는 끝낸 대학 시절까지 꾸준히 함께한 프로그램이었다. 하지만 매번 만들기를 시작할 때면 어떤 템플릿을 이용해서 조금이라도 이쁘게 만들까에 대한 고민이 먼저였고, 만들때마다 새롭고 굳이 하고 싶지 않은 작업이었다.
아마 많은 사람들이 나와 같은 경험을 했을 것이라 생각한다. 그래서 과제를 받으면 기획에 대한 고민보다는 템플릿을 찾는데 좀 더 많은 시간을 투자하고, 페이스북에서 본 PPT 꿀팁들을 따라하지만 잘 안되는 경험들을 한번씩은 했을 것이다.</description>
    </item>
    
    <item>
      <title>Do it! 첫 코딩 보통사람이 알아야 할 프로그램이 기초 with 자바</title>
      <link>https://sihan-son.github.io/first-coding/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/first-coding/</guid>
      <description>4차산업혁명이 사회적 현상으로 대두되면서 동시에 프로그래밍이 시민의 기본요소로 자리잡아가고 있는 분위기이다. 공교육과정에 프로그래밍이 편입되었고, 점점 어린 친구들이 코딩을 시작하고 있다. 흔히 전통 인문계통 전공들에서도 컴퓨터의 사용이 많아지고, 프로그래밍능력이 필요해지고 있다.
프로그래밍을 배워보고자 자료를 찾다보면 너무나 많은 자료가 인터넷에 있고, 어디서 무엇부터 시작해야 할지 막막한 경우가 대부분이다. 인프런, 프로그래머스, 생활코딩 등 다양한 영상 교육사이트들도 존재하고, 다양한 책들이 출판되고 있다. 이 자료의 홍수에서 사람들 마다 입문으로 추천하는 programming language, 책, 사이트가 천차만별이다. 컴파일 언어, 인터프리터 언어, Mark Up 언어 등 익숙하지 않고 비슷비슷해 보이는 것들이 튀어나온다.</description>
    </item>
    
    <item>
      <title>백견불여일타 C# 입문</title>
      <link>https://sihan-son.github.io/csharp-intro-review/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/csharp-intro-review/</guid>
      <description>세 번쨰로 리뷰하게 된 책은 백견불여일타 C# 입문: 예제와 연습문제에 집중한 프로그래밍 입문서입니다. 로드북 출판사에 새롭게 나온 C#입문서입니다.
C#은 자바에 대항하기 위해 MicroSoft사에서 개발한 멀티 플랫폼 언어인데 아직은 윈도우를 제외한 macOS, Linux에서 완벽하게 지원이 되지 않고 있는 살짝 비운의 언어입니다. 개인적으로는 시작언어로 추천할 만한 언어라고 생각합니다. 객체지향, 깔끔하고 강력한 IDE인 Visual Studio과 개발사에서 제공하는 MSDN의 도큐먼트를 가지고 있습니다
이 책은 프로그래밍 용어가 익숙하지 않은 입문자들을 위해서 최대한 용어를 풀어 쓰고 있습니다.</description>
    </item>
    
    <item>
      <title>다시 미분 적분</title>
      <link>https://sihan-son.github.io/again-calculus/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/again-calculus/</guid>
      <description>고등학교 시절 문과의 성골이라고 할 수 있는 어문계열학교에서 독일어를 전공을 하다가 대학에 와서컴퓨터 계열 전공을 하면서 느낀 가장 큰 문제는 수학적 베이스가 약하다는 것이었다. 선형대수, 이산수학, 미적분 등등 여러 과목을 수업 또는 독학을 하면서 중간 중간 뚫려있는 공백들은 꽤 큰 약점으로 다가 왔다.
인공지능 분야 공부를 하면서 수학적 베이스가 나의 발목을 잡았다. 급한데로 미적분학을 시작으로 얼기설기 쌓고는 있었지만 내가 개념을 바로 이해하고 있는지에 대한 고민도 존재 했다. 그러던 중 길벗에서 다시 미분 적분이라는 책이 나온 것을 발견 했고, 좋은 기회에 책을 제공 받아 이렇게 리뷰를 작성 할 수 있는 기회를 얻게 되었다.</description>
    </item>
    
    <item>
      <title>간단하게 훑어보는 Advanced CNNs</title>
      <link>https://sihan-son.github.io/mldl/advanced-cnn/</link>
      <pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mldl/advanced-cnn/</guid>
      <description>언제나 처럼 다시 돌아온 간단하게 Deep Learning 개념 정리 글입니다. 자세한 내용은 각 논문을 참조하거나 다른 학술 블로그를 읽어 주세요. 이 글에서 언급 되는 아키텍쳐들에 관한 논문 제목은 글 하단의 각주로 확인해 주세요.
 Index 1. AlexNet2. VGGNet, GoogLeNet3. ResNet fig.1 ILSVRC 우승 네트워크 레이어 수
2012년 AlexNet을 시작으로 Convolution Neural Network CNN은 빠른 속도로 성능이 좋아지고 위 이미지에서 보이는 것 처럼 레이어가 깊어지기 시작했습니다. 이후 모델들은 가중치 업데이트를 위해 사용한 Error Backpropagation 알고리즘의 단점인 Gradient Vanishing과 Gradient Exploding 문제를 극복하고 나온 모델들입니다.</description>
    </item>
    
    <item>
      <title>Pandoc으로 Markdown Github-style 렌더링하기</title>
      <link>https://sihan-son.github.io/git/pandoc-github-style-render/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/git/pandoc-github-style-render/</guid>
      <description>Pandoc이라는 Haskell로 작성 된 converter로 markdown, mediawiki, textile, HTML, docx(ms word), epub, PDF 등으로 변화이 가능한 유틸리입니다.
설치 다운로드에서 스크롤을 내리시면 OS별로 설치 파일을 받을 수 있습니다. OS 버전에 맞는 걸로 설치 해주세요.
주요 옵션    옵션 설명     -o FILENAME, &amp;ndash;output=FILENAME 저장할 파일명   -f FORMAT, &amp;ndash;from=FORMAT 소스 포맷   -t FORMAT,&amp;ndash;to=FORMAT 저장할 포맷   &amp;ndash;toc 목차 생성   -S, &amp;ndash;smart pandoc 이 소스 포맷을 판단해서 처리   -s, &amp;ndash;standalone 파일이 아닌 STDIN 에서 입력 수행   -c URL, &amp;ndash;css=URL 변환시 사용할 CSS 의 URL   -H FILENAME, &amp;ndash;include-in-header=FILENAME FILENAME 을 HEADER 로 사용   -A FILENAME, &amp;ndash;include-after-body=FILENAME FILENAME 을 footer 로 사용     -o FILENAME은 필수 옵션입니다.</description>
    </item>
    
    <item>
      <title>Apple 2019 신제품</title>
      <link>https://sihan-son.github.io/review/apple-new-product/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/review/apple-new-product/</guid>
      <description>한국시간 2019년 9월 11일 새벽 2시에 스티브 잡스 극장에서 신제품 발표회가 진행되었습니다. 발표된 제품은 Apple watch series 5, iPad 7th generation, iPhone 11, iPhone 11 Pro &amp;amp; Pro Max였고, 서비스로는 Arcade, Apple Tv +가 서비스 시작을 알렸습니다.
Arcade 애플에서 WWDC에서 발표 한 구독형 서비스 중 게임 서비스 구독 모델입니다. 코나미, 캡콤 등의 게임사의 게임을 시연을 했습니다. 9월 19일 ios 13의 정식 버전 릴리즈와 함께 150개국 이상의 국가에서 사용이 가능한 서비스입니다. 가격은 가족공유를 포함해 월 4.</description>
    </item>
    
    <item>
      <title>Github에서 Public 저장소를 Private로 바꾸어 봅시다</title>
      <link>https://sihan-son.github.io/git/github-repo-public-to-private/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/git/github-repo-public-to-private/</guid>
      <description>오늘 알아볼 내용은 Public repository를 Private repository로 바꾸는 법을 알아보겠습니다. 원래는 유료 기능이었으나 Microsoft가 작년에 GitHub을 인수하면서 학생사용자들에게만 무료로 제공 되던 Private repository를 모든 사용자에게 무료로 풀어주었습니다. 그래서 BitBucket의 매력이 크게 떨어져서 조금 슬픈 일이긴 하지만 저는 GitHub을 더 좋아하기 때문에 기존의 Public repository를 Private repository로 바꾸어 봅시다.
리포를 들어가면 제일 상단에 이미지처럼 여러 메뉴가 있습니다. 오늘 저희가 필요한 기능은 제일 우측에 있는 Settings에 있습니다.
Settings에 들어가서 스크롤을 제일 아래로 내리면 다음과 같은 화면이 보입니다.</description>
    </item>
    
    <item>
      <title>쉽게 따라하는 Colab과 구글 드라이브 연결</title>
      <link>https://sihan-son.github.io/setting/colab-setting/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/setting/colab-setting/</guid>
      <description>오늘 포스팅은 그림이 무척 많은 Colab을 사용하는 방법부터 Colab에서 구글 드라이브를 저장소로 사용하는 방법입니다. 차근차근 따라와 주세요.
먼저 구글 드라이브에 들어가주세요. 저장소로 쓰기 때문에 어느 정도 용량확보가 필요합니다. 그래서 기존 구글 계정의 용량이 모자른다면 새로운 구글 계정을 만드셔서 하시는 것을 추천합니다.
 Index  Colab 추가하기 Colab 시작하기 GPU 사용하기 Google Drive 연결하기   1. Colab 추가하기 구글 드라이브의 메인 화면에서 마우스 우클릭을 해주시면 위와 같은 이미지가 뜨게 됩니다. 저는 이미 Colab을 추가한 상태라 항목에 Colab이 보이지만 이 글을 보고 계신 대부분의 사용자 분들은 없는게 정상이니 걱정하지 마세요.</description>
    </item>
    
    <item>
      <title>독일어 격 지배 동사와 단수 복수</title>
      <link>https://sihan-son.github.io/language/german-02/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/language/german-02/</guid>
      <description>독일어를 배우다보면 때려치고 싶은 순간이 참 여럿 있는데 그 중 하나가 4가지나 존재하는 격을 배울 때 일겁니다. 1격은 변형이 없지만 2,3,4격에서는 동사 명사들이 격변화가 생기기 때문에 어느 동사가 어느 격을 요구하는지 알아둘 필요가 있습니다. 3가지 격이 있지만 우리는 2격은 사실상 고려하지 않아도 되니 참 다행입니다. 그래서 오늘은 자주 사용되는 3격과 4격을 지배하는 동사 알아보고자 합니다.
 Index 3/4격 지배동사명사 복수형 3/4격 지배동사 3격 지배 동사
 helfen gefallen gehören danken passen stehen schmecken gratulieren gut/schlecht sehen  4격 지배 동사</description>
    </item>
    
    <item>
      <title>독일어 전치사 편</title>
      <link>https://sihan-son.github.io/language/german-01/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/language/german-01/</guid>
      <description>오늘은 사실상 제 본진이었던 독일어 포스팅을 해보결고 합니다. 아마 이글을 들어오는 독자 분들은 수능 제2외국어를 보거나 외고에 재학하는 학생분들일 것 같습니다. 왜 독일어가 본진이었던 사람이 이런 블로그를 운영하는지에 대해서 깊이 알려고 하시다가는 같은 전철을 밟을 수도 있지만 궁금하면 페이스북으로 문의 해주세요.
 전치사 정리전치사와 동사 조합관용표현 오늘은 전치사의 종류와 많이 쓰이는 전치사와 동사의 조합에 대해서 정리하고 관용 표현에 대해서 다루려고 합니다. 오늘 다룰 전치사는 시간과 공간에 대한 전치사 입니다. 전치사 뒤에 몇격이 오는지도 굉장히 중요하기 때문에 격도 잘 외워주세요.</description>
    </item>
    
    <item>
      <title>독일어의 인칭대명사</title>
      <link>https://sihan-son.github.io/language/german-00/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/language/german-00/</guid>
      <description>인칭대명사    단수 1격 3격 4격     1인칭 ich mir mich   2인칭 du dir dich   2인칭/존칭 Sie Ihnen Sie   3인칭/남성 er ihm ihn   3인칭/여성 er ihm ihn   3인칭/중성 er ihm ihn        복수 1격 3격 4격     1인칭 wir uns uns   2인칭 ihr euch euch   3인칭/존칭 Sie Ihnen Sie   3인칭 sie ihnen sie    소유대명사     단수 복수     1인칭 mein unser   2인칭 dein euer   3인칭 sein, ihr, sein ihr   존칭 Ihr Ihr    ** 3인칭 단수는 남성/여성/중성 순서입니다</description>
    </item>
    
    <item>
      <title>쉽게 따라하는 Pycharm interpreter 설정</title>
      <link>https://sihan-son.github.io/setting/pycharm-setting/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/setting/pycharm-setting/</guid>
      <description>오늘 알아볼 내용은 Pycharm에서 Python interpreter설정입니다. 잘나온 Python IDE가 여러가지라 취향에 따라서 Jupyter, vscode, spyder 등등 여러가지 사용하고 계실겁니다. 이 글은 그중에서 Pycharm 사용하시려는 분 중에서 interpreter설정에서 문제를 격고 계신 분들을 위한 포스팅입니다.
1. 기본 interpreter 설정하기! fig 1
interpreter 설정을 위해서 파란색으로 하이라이트 되어 있는 setting을 눌러줍니다.
fig 2
fig 3
이제 fig 2이미지에서 좌측 메뉴의 Project Interpreter를 들어가면 처음이시면 fig 2처럼 빈 화면이 뜨게 됩니다. 이제 우측 상단의 빨간 동그라미 표시된 톱니 바퀴를 누르게 되면 fig 3과 같이 Add와 Show all이 나옵니다.</description>
    </item>
    
    <item>
      <title>Cheetah 딥러닝용 GPU 플랫폼</title>
      <link>https://sihan-son.github.io/review/cheetah-gpu/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/review/cheetah-gpu/</guid>
      <description>Deep Learning을 공부하거나 프로젝트를 진행하려면 GPU는 필수적입니다. 저의 경우는 GTX 970모델을 이용 중이었지만 학습으로 갈궈지고, 오버워치를 하다가 퍽 하고 전원이 나가더니 죽어버리는 불상사를 겪었습니다.
졸업 프로젝트로 Deep Learning관련 프로젝트를 진행하고 있어서 GPU가 절대적으로 필요한 상황이었는데 그나마 있던 GPU가 죽어서 정말 곤란한 상황이 되었습니다. 그러던 중 머신러닝 플랫폼 서비스를 오픈해서 베타 서비스를 진행중인 Cheetah라는 플랫폼을 알게 되었습니다. 마침 베타 테스터들에게 한달간 무료로 GPU 서버를 대여 해주고 있어서 RTX 2080TI 서버를 대여해 사용할 수 있었습니다.</description>
    </item>
    
    <item>
      <title>간단하게 정리한 Mode Collapse</title>
      <link>https://sihan-son.github.io/mldl/mode-collapse/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mldl/mode-collapse/</guid>
      <description>저는 언제나 처럼 간단하게 이게 어떤 개념인지만 짚고 넘어가겠습니다. 자세한 내용은 다른 학술 블로그들을 참조해 주세요!
GAN관련 논문이나 자료들을 읽다 보면은 심심치 않게 mode collapse라는 말을 발견 할 수 있습니다. 여기서 mode는 수학에서 말하는 최빈값입니다. 즉 제일 자주 등장하는 값들을 말합니다. mode collapse는 보통 Multi-Modal일 경우 두드러지게 발생 할 수 있습니다. 튜토리얼로 자주 사용하는 MNIST의 경우 &amp;lsquo;0~9&amp;rsquo; 10개의 mode를 갖게 됩니다.
Generator G가 input z를 하나의 mode에 치우쳐 변화시키는 현상이 발생합니다.</description>
    </item>
    
    <item>
      <title>간단하게 정리한 Norm</title>
      <link>https://sihan-son.github.io/mldl/what-is-norm/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mldl/what-is-norm/</guid>
      <description>저는 언제나 처럼 간단하게 이게 어떤 개념인지만 짚고 넘어가겠습니다. 자세한 내용은 다른 학술 블로그들을 참조해 주세요! 그럼 이번 글에서는 Norm에 대한 개념을 간단하게 잡아 봅시다!
What is Norm? Norm은 수학적으로 벡터 공간 또는 행렬에 있는 모든 벡터의 전체 크기, 길이를 의미합니다. 단순화를 위해 표준이 높을수록 행렬 또는 벡터의 값이 커집니다.
p: Norm의 차수(p의 차수에 따라 L0, L1, L2 결정)
N: 대상 벡터의 요소 수
L0 Norm 실제로 Norm은 아닙니다. 벡터의 0이 아닌 요소의 총 개수를 의미합니다.</description>
    </item>
    
    <item>
      <title>윈도우에서 Jekyll 서버 실행하기</title>
      <link>https://sihan-son.github.io/setting/jekyll-github-page/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/setting/jekyll-github-page/</guid>
      <description>오늘은 Github page로 블로그 중에서 Jekyll 기반 블로그를 이용하는 이용자에게 push 하지 않고 로컬머신에서 확인하는 방법을 소개하려고 합니다. Mac, Linux 사용자에겐 상대적으로 수월 하지만 윈도우에서는 번거러운 점이 좀 있어서 시도해보다가 그만둔 사용자가 있을 겁니다. 제가 그 중 하나였으니까요. 그래서 Ruby 설치 부터 로컬 머신 실행까지 절차를 알아보려고 합니다!
루비 Ruby 설치 Jekyll은 Ruby로 만들어 졌기 때문에 먼저 Ruby를 설치해야합니다. Ruby installer for Window에서 Ruby+Devkit 파일을 다운로드 받으셔서 설치하면 됩니다. 이 과정에서 환경변수(PATH)까지 잡히게 됩니다</description>
    </item>
    
    <item>
      <title>머신러닝 교과서 with 파이썬, 사이킷런, 텐서플로</title>
      <link>https://sihan-son.github.io/ml-book-review-gilbut-1/</link>
      <pubDate>Sat, 06 Jul 2019 23:04:49 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/ml-book-review-gilbut-1/</guid>
      <description>![](/images/blog/book1.jpg&#39;&amp;gt;
이 책은 다른 머신러닝 도서가 그렇듯이 인공지능이 어떤 역사를 가지고 발전했는지로 이야기를 시작합니다. 머신러닝에서 사용되는 전반인 용어와 표기법에 대한 정의로 글을 시작하기 때문에 입문서로 큰 장점이라고 생각됩니다. 입문서라고 나온 도서들 중에도 번역된 용어와 원어가 혼재되어 사용되어 인터넷에서 얻는 자료와 용어차이에서 오는 괴리감이 있는데 이 책은 그 부분을 해결 해주는 부분이 있습니다.
파이썬에 익숙하지 않은 사용자를 위해서 패키지 관리를 위해 pip와 conda에 대한 사용법도 제시하고 있습니다. 하지만 파이썬 문법에 대한 설명이 없기 때문에 파이썬은 어느 정도 익힌 다음에 읽는 것을 추천합니다.</description>
    </item>
    
    <item>
      <title>Symbolic Music Genre Transfer with CycleGAN(3)</title>
      <link>https://sihan-son.github.io/paper/3-cyclegan-music-model/</link>
      <pubDate>Fri, 05 Jul 2019 00:49:14 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/paper/3-cyclegan-music-model/</guid>
      <description>Index  Intro Related Work Model Architecture Dataset and Preprocessing Architecture Parmeters and Training Experimental Results Conclusion  이 논문에서 사용하는 모델은 Generative adversarial network(GAN)에 기반을 두고 있습니다. Ian Goodfellow et al1에서 제안 된 기존의 모델에서는 Generator G와 Discriminator D가 존재 합니다. G는 노이즈를 실제 데이터 처럼 만드는 역할을 합니다. D는 G가 만들어낸 가짜 데이터와 실제 데이터를 구별하는 역할을 합니다.
Music domain transfer이기 때문에 input데이터는 노이즈가 아니라 실제 음악 데이터이고, 본 논문에서는 음악 데이터중에서 MIDI 데이터를 사용합니다.</description>
    </item>
    
    <item>
      <title>쉽게 따라하는 Tensorflow-gpu Setting with anaconda</title>
      <link>https://sihan-son.github.io/setting/tensoflow-gpu-setting/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/setting/tensoflow-gpu-setting/</guid>
      <description>Tensorflow를 사용하면서 제일 힘든 작업은 GPU를 이용한 환경을 세팅하는 일이다. CUDA, cuDNN등 여러 패키지를 설치해야하고, 또 따라하라는데로 따라하는데 블로그 글들이 업데이트가 되어 있지 않아서 버전 오류가 발생하기도 한다. 그래서 간단한 방법을 소개하려고 한다.
먼저 anaconda가 필요하다. anaconda는 과학용 파이썬 패키지를 묶어서 배포하는 배포판 인데 이 내용은 다음에 알아보도록 하고, anaconda가 설치 되어 있다는 사람들을 대상으로 글을 쓴다. 혹시 anaconda 설치가 필요하다면 이 글을 참조해서 설치하길 바란다.
먼저 python 버전이 tensorflow와 호환되는 버전이지 확인이 필요하다.</description>
    </item>
    
    <item>
      <title>Symbolic Music Genre Transfer with CycleGAN(4)</title>
      <link>https://sihan-son.github.io/paper/4-cyclegan-music-pre/</link>
      <pubDate>Thu, 04 Jul 2019 00:49:14 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/paper/4-cyclegan-music-pre/</guid>
      <description>Index  Intro Related Work Model Architecture Dataset and Preprocessing Architecture Parmeters and Training Experimental Results Conclusion  Model Architecture파트전에 Dataset and Preprocessing 파트를 먼저 다루려고합니다. 이 파트는 MIDI대한 간단한 설명과 데이터 전처리 방법과 전략이 나와있는 장입니다. 미디를 다루는 딥러닝 프로젝트에 꽤 큰 도움이 될 듯 합니다.
MIDI (Musical Instrument Digital Interface)는 통신 규격을 담은 심볼릭 데이터입니다. 여기에 대한 자세한 설명은 Symbolic Music MIDI를 참조 해주세요. MIDI는 통신 규격이기 때문에 진짜 소리를 가지고 있지 않습니다.</description>
    </item>
    
    <item>
      <title>간단하게 알아보는 Difference between VAE and GAN</title>
      <link>https://sihan-son.github.io/mldl/difference-between-vae-and-gan/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mldl/difference-between-vae-and-gan/</guid>
      <description>What is difference between VAE and GAN VAE와 GAN은 그림에서 보다시피 Maximum Likehood의 범주에 속하는 방법론이다. 그림에서 볼 수 있든 Explicit한 방법론과 Implicit한 방법론으로 나뉜다. 이 블로그에서 주로 다루는 GAN은 보다시피 Implicit(암시적인)한 방법론을 취하고 있다.
VAE Variational Autoencoder(AVE)는 Kingma et al1의 논문에서 제안된 네트워크의 구조이다. 복잡한 데이터 생성 모델을 설계하고 대규모 데이터 세트에 적용을 할 수 있게 해준다. input을 z로 encoding하고 스스로 input을 decoding하는 방법을 학습하는 방법이다. 즉 decoding된 output이 input과 최대한 가깝게 만들어는 내는 방법이다.</description>
    </item>
    
    <item>
      <title>Simple Latent Space</title>
      <link>https://sihan-son.github.io/mldl/latent-space/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/mldl/latent-space/</guid>
      <description>오늘은 Generative adversarial network GAN 논문을 읽거나 자료를 접하다보면 자주 보는 latent space에 대한 자료를 포스팅 하려고 합니다. 이 포스트는 아마도 지속적으로 업데이트가 진행되면서 내용이 풍부해지길 저도 기대하고 있습니다. 이 포스팅은 latent space에 대해서 간단하게 알아보는 포스팅이니 개념만 잡고 가세요. 혹시 잘못된 내용이 있다면 메일이나 댓글로 피드백 주시면 수정하도록 하겠습니다!
머신러닝의 성능은 데이터의 양과 질에 굉장히 의존적입니다. Trash in Trash out 말이 있듯이 데이터의 질에 성능이 심히 요동치게 됩니다.
그래서 데이터가 모이면 어떤 feature가 유용한지 아닌지 확인하는 작업이 필요로 합니다.</description>
    </item>
    
    <item>
      <title>Symbolic Music Genre Transfer with CycleGAN(2)</title>
      <link>https://sihan-son.github.io/paper/2-cyclegan-music-related/</link>
      <pubDate>Mon, 01 Jul 2019 00:49:14 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/paper/2-cyclegan-music-related/</guid>
      <description>지난 글에 이어서 이번 글에서는 Related Work 파트의 내용을 정리해려고 합니다. 이번 파트는 선행 연국에 대한 이야기이기 때문에 레펀러스가 많이 달리고 논문 링크는 하단에 레퍼런스로 있습니다
Index  Intro Related Work Model Architecture Dataset and Preprocessing Architecture Parmeters and Training Experimental Results Conclusion  Related Work Gatys et al.1의 논문에서 Neural Style Transfer의 컨셉을 설명한다. 이 논문에서는 Pre-Trained CNN ResNet을 이용해 두 이미지의 스타일과 컨텐츠를 합친다.
CycleGAN2같은 접근에서는 explict 스타일 특성 추출이 요구되지 않는다.</description>
    </item>
    
    <item>
      <title>Symbolic Music MIDI</title>
      <link>https://sihan-son.github.io/music/midi/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sihan-son.github.io/music/midi/</guid>
      <description>Index  MIDI란? MIDI의 구조   MIDI (Musical Instrument Digital Interface) 란? MIDI는 Musical Instrument Digital Interface 의 약자로서, 전자악기의 디지털 데이터를 주고 받기 위한 표준 규격이다.
MIDI의 구조 MIDI파일은 Chunk들의 집합으로서, 여러 개의 청크들로 구성되어있다. 청크는 다음과 같이 구성되며, 청크 타입은 크게 헤더, 트랙, 러닝 스테이터스로 구분할수 있다.
Head Head 청크는 Mthd 로 표현되며, MIDI 청크 중 가장 앞에 단 하나만 존재한다. Head 청크의 길이는 14바이트이며, 다음과 같이 구성된다.</description>
    </item>
    
    <item>
      <title>Symbolic Music Genre Transfer with CycleGAN(1)</title>
      <link>https://sihan-son.github.io/paper/1-cyclegan-music-intro/</link>
      <pubDate>Sat, 29 Jun 2019 00:49:14 +0900</pubDate>
      
      <guid>https://sihan-son.github.io/paper/1-cyclegan-music-intro/</guid>
      <description>졸업 작품으로 Generative adversarial network(GAN)을 이용해 작곡을 하려고 했다. 프로젝트 진행을 위해 자료 수집을 진행하며 지도 교수님과 이야기를 통해 작곡에서 domain transfer 즉 음악의 편곡으로 방향을 선회해 프로젝트를 진행하게 되었다. 핵심적으로 본 논문들을 리뷰하면서 공부한 내용을 정리하고자 한다. 수학적 베이스가 약해서 논문을 읽으면서 가장 힘들었던 부분이 Loss function에 관한 내용이었던 만큼 이 부분의 감안하고 읽어 주세요. 논문 리뷰 이후에 github에 공개된 코드를 리뷰해 보려고 합니다
처음으로 살펴볼 논문은 Symbolic Music Genre Transfer with CycleGAN입니다.</description>
    </item>
    
  </channel>
</rss>
